<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Network on Wiesen&#39;s Blog</title>
    <link>http://wiesen.github.io/topics/network/</link>
    <description>Recent content in Network on Wiesen&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Wed, 26 Oct 2016 10:32:46 +0800</lastBuildDate>
    <atom:link href="http://wiesen.github.io/topics/network/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>TCP断包粘包问题</title>
      <link>http://wiesen.github.io/post/TCP%E6%96%AD%E5%8C%85%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 26 Oct 2016 10:32:46 +0800</pubDate>
      
      <guid>http://wiesen.github.io/post/TCP%E6%96%AD%E5%8C%85%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/</guid>
      <description>

&lt;p&gt;（内容收集自网络）&lt;/p&gt;

&lt;h2 id=&#34;粘包问题&#34;&gt;粘包问题&lt;/h2&gt;

&lt;p&gt;粘包问题是由 TCP 是&lt;strong&gt;“字节流”&lt;/strong&gt;协议，没有消息边界所引起的。而 UDP/HTTP 具有消息边界，所以不存在断包粘包问题。&lt;/p&gt;

&lt;p&gt;另外：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;如果发送数据无结构，如文件传输，这样发送方只管发送，接收方只管接收存储就 ok，也不用考虑粘包；&lt;/li&gt;
&lt;li&gt;如果利用 TCP 短连接时，不会出现粘包问题；&lt;/li&gt;
&lt;li&gt;当发送数据存在一定结构，并且需要维护长连接时，则需要考虑粘包问题；&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;问题原因&#34;&gt;问题原因&lt;/h2&gt;

&lt;p&gt;出现粘包现象的原因既可能由发送方造成，也可能由接收方造成:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;发送端需要等缓冲区满才发送出去，造成粘包;&lt;/li&gt;
&lt;li&gt;接收方没能及时地接收缓冲区的包，造成多个包接收;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;解决方法&#34;&gt;解决方法&lt;/h2&gt;

&lt;p&gt;为了避免粘包现象，可采取以下几种措施。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;对于发送方引起的粘包现象，用户可通过编程设置来避免，TCP 提供了强制数据立即传送的操作指令 push，TCP 软件收到该操作指令后，就立即将本段数据发送出去，而不必等待发送缓冲区满；&lt;/p&gt;

&lt;p&gt;缺点: 第一种编程设置方法虽然可以避免发送方引起的粘包，但它关闭了优化算法，降低了网络发送效率，影响应用程序的性能，一般不建议使用。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对于接收方引起的粘包，则可通过优化程序设计、精简接收进程工作量、提高接收进程优先级等措施，使其及时接收数据，从而尽量避免出现粘包现象；&lt;/p&gt;

&lt;p&gt;缺点: 第二种方法只能减少出现粘包的可能性，但并不能完全避免粘包，当发送频率较高时，或由于网络突发可能使某个时间段数据包到达接收方较快，接收方还是有可能来不及接收，从而导致粘包。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;既能保证效率又能比较好地解决粘包的方法，是由应用层进行&lt;strong&gt;分包处理&lt;/strong&gt;，本质上就是由&lt;strong&gt;应用层&lt;/strong&gt;来维护消息和消息的边界。主要是采用以下两种方式：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;以&lt;strong&gt;特殊字符&lt;/strong&gt;作为消息的分界符;&lt;/li&gt;
&lt;li&gt;在消息头部加入整个消息的&lt;strong&gt;长度信息&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>