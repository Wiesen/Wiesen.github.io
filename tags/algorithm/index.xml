<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm on Wiesen&#39;s Blog</title>
    <link>https://wiesen.github.io/tags/algorithm/</link>
    <description>Recent content in Algorithm on Wiesen&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Apr 2016 21:31:33 +0800</lastBuildDate>
    
	<atom:link href="https://wiesen.github.io/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>微软2016校招在线笔试题解</title>
      <link>https://wiesen.github.io/post/%E5%BE%AE%E8%BD%AF2016%E6%A0%A1%E6%8B%9B%E5%9C%A8%E7%BA%BF%E7%AC%94%E8%AF%95%E9%A2%98%E8%A7%A3/</link>
      <pubDate>Fri, 15 Apr 2016 21:31:33 +0800</pubDate>
      
      <guid>https://wiesen.github.io/post/%E5%BE%AE%E8%BD%AF2016%E6%A0%A1%E6%8B%9B%E5%9C%A8%E7%BA%BF%E7%AC%94%E8%AF%95%E9%A2%98%E8%A7%A3/</guid>
      <description>微软2016校招在线笔试题解 题目地址：mstest2016april1
感受：一定要理解好题意，注意细节。另外微软特别喜欢考察反向思维。
A. Font Size 选择一个最大字号刚好可以令页数不超过给定阈值P。
逻辑理清即可。页由行组成，行由字符组成，其中字符为方形。需要注意的地方是：(1) 每段都从新的一行开始；(2) 每页至少显示一个字符。
字号是整数，可以暴力求解遍历直到合适字号，单点时间复杂度为O(10^6)，没有超过题目限制。但如果题目再卡紧点就有点危险了，所以更好的方法是利用二分查找，注意好边界条件即可。
编码思路如下：
1.确定字号最小值为1，最大值为 min(W, H)
2.求字号为中值 m 时的页数：每段所占行数 a[i]/(W/m)，对所有段所占行数求和，最后求所占页数 total/(H/m)。
3.当所占页数大于等于阈值P，则r=m，小于则l=m+1，直到l&amp;gt;=r。注意等于阈值P时并不代表已经找到解，字号可能还能增大。
4.解为 r-1。
B. 403 Forbidden 题目的要求是进行 IP 地址匹配，返回最先（序号最小）匹配到的规则的动作，没有匹配的规则则返回 allow。
一种方法是利用前缀树求解。建树方法: 在插入新规则 new 时，在该规则的前缀路径上（含等长）已有规则 old，意味着 old 屏蔽了new，直接丢弃新规则new。 由此，在匹配一个 IP 地址时，只需要返回前缀树上匹配这个 IP 地址的最长规则。
建树时间复杂度为 O(N)，匹配一次只需要常数时间，整体时间复杂度为 O(min{N,M})。
C. Demo Day 动态规划水题，起始位置为 (1,1)，动作为向下或向右，考虑好各个状态转移,并且注意边界特殊情况即可。时间复杂度为 O(N*M)。
DP[i][j][k] 含义为：在第 i 行 第 j 列时，向 k 方向前进需要改变多少个格子 (1&amp;lt;=i&amp;lt;=N, 1&amp;lt;=j&amp;lt;=M, k=right or down)。
DP[i][j][right] = min{DP[i][j-1][right], DP[i-1][j][down] + (i + 1 &amp;lt; n &amp;amp;&amp;amp; maze[i+1][j] !</description>
    </item>
    
    <item>
      <title>快速排序笔记</title>
      <link>https://wiesen.github.io/post/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 15 Mar 2016 21:31:20 +0800</pubDate>
      
      <guid>https://wiesen.github.io/post/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AC%94%E8%AE%B0/</guid>
      <description>[TOC]
快排最引人注目的特点是原地排序（只需要一个很小的辅助栈），且将长度为 N 的数组排序所需的时间和 NlgN 成正比。 而快排的主要缺点是非常脆弱，在实现时必须非常小心才能避免性能低下。
同前述一致：以 C++ 实现,仅针对 vector 进行操作, 并且遵循 C++ 左闭右开的区间标准: [a,b)。
基本算法 快排也是一种分治的排序算法，快排与归并排序是互补的：
 归并排序将数组分成两个子数组分别排序，再将有序子数组归并以将整个数组排序，其递归调用发生在处理整个数组之前； 而快排则是先确定 key 的位置，而后当两个子数组都有序时则整个数组即有序，其递归调用发生在处理整个数组之后。  快排的关键在划分，划分过程需要使得数组满足以下三个条件：
 对于某个 key，a[key] 已经排定； [low,key) 中所有元素都不大于 a[key]； [key,high) 中所有元素都不小于 a[key]。  据此，快排的基本思想是:
 选取一个元素作为切分元素 key，然后从数组左端开始向右扫描直到找到一个大于等于它的元素，再从数组右端开始向左扫描直到找到一个小于等于它的元素，而后交换它们的位置; 如此继续，就可以保证左指针 left 的左侧元素都不大于 key，右指针 right 的右侧都不小于 key; 当左右指针相遇时 （left &amp;gt;= right），将切分元素 key 与左子数组最右元素（也就是 right 最终停下的位置）交换然后返回划分位置 right 即可。
int Partition(std::vector&amp;lt;T&amp;gt; &amp;amp;vec, int low, int high) { int left = low, right = high; while (true) { // Avoid subscript beging out of range while (vec[++left] &amp;lt; vec[low]) if (left == high - 1)break; while (vec[low] &amp;lt; vec[--right]) if (right == low)break; // Terminate the loop if (left &amp;gt;= right)break; std::swap(vec[left], vec[right]); } std::swap(vec[low], vec[right]); return right; }   快排中有若干细节问题值得注意，否则会导致实现错误或者性能下降:</description>
    </item>
    
    <item>
      <title>归并排序笔记</title>
      <link>https://wiesen.github.io/post/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 10 Mar 2016 21:24:46 +0800</pubDate>
      
      <guid>https://wiesen.github.io/post/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%AC%94%E8%AE%B0/</guid>
      <description>[TOC]
归并排序是一种渐近最优的基于比较排序的算法, 意即: 其在最坏情况下的比较次数和任意基于比较的排序算法所需的最少比较次数都是~NlgN。其主要的优点是可以保证将任意长度为 N 的数组排序的时间复杂度为 O(NlgN); 其主要缺点是空间复杂度为 O(N)。
这里均以 C++ 实现, 为了避免陷入到语言细节里所以仅针对 vector 进行操作, 并且遵循 C++ 左闭右开的区间标准: [a,b)。值得注意的是区间表示一致性这个细节对针对数组和搜索(如二分查找)的算法有着举足轻重的影响。
至于倾向于 [a,b) 左闭右开区间表示的原因可参考链接。简单来说主要原因有二: 一是 end-begin 即可得到区间大小; 二是当区间退化为 0 时包含左界更加&amp;rdquo;natural&amp;rdquo;。
自顶向下的归并排序 递归实现的归并排序是算法设计中分治思想的典型应用。
主要是两个函数: 由 MergeSort() 负责递归调用, Merge() 负责归并。
 优化一: 对小规模子数组使用插入排序
递归会使小规模问题中方法的调度过于频繁, 而插入或者选择在小数组上比归并要快, 所以改进对小规模子数组的处理方法可以改进整个算法。根据经验, 使用插入处理小规模子数组(&amp;lt;15)可将归并的运行时间缩短10%~15%。
 优化二: 测试子数组是否有序
添加一个判断条件: if (a[mid] &amp;gt; a[mid+1]) 再进行 Merge() 操作, 否则数组已经是有序的。进行此优化可以令任意有序的子数组算法时间复杂度变为线性。
 优化三: 不将元素复制到辅助数组
在递归调用的每个层次交换输入数组和辅助数组的角色, 可节省将数组元素复制到用于归并的辅助数组的时间(无法节省空间)。
template&amp;lt;class T&amp;gt; void Merge(std::vector&amp;lt;T&amp;gt; &amp;amp;src, std::vector&amp;lt;T&amp;gt; &amp;amp;dest, int nHead, int nMid, int nEnd) { int nLeftIndex = nHead, nRightIndex = nMid; for (int i = nHead; i &amp;lt; nEnd; ++i){ // Detail: Use range[nHead, nEnd) if (nLeftIndex &amp;gt;= nMid) dest[i] = src[nRightIndex++]; else if (nRightIndex &amp;gt;= nEnd) dest[i] = src[nLeftIndex++]; else if (src[nLeftIndex] &amp;lt; src[nRightIndex]) dest[i] = src[nLeftIndex++]; else dest[i] = src[nRightIndex++]; } } template&amp;lt;class T&amp;gt; void MergeSort(std::vector&amp;lt;T&amp;gt; &amp;amp;src, std::vector&amp;lt;T&amp;gt; &amp;amp;dest, int nHead, int nEnd) { // if (nEnd - nHead &amp;lt;= 1) return; // Before optimizing // Optimization 1: Use InsertSort when small scale if (nEnd - nHead &amp;lt;= 15) { InsertSort(dest, nHead, nEnd); return; } int nMid = (nHead + nEnd) / 2; // Optimization 2: Avoid copying to auxiliary array MergeSort(dest, src, nHead, nMid); MergeSort(dest, src, nMid, nEnd); // Optimization 3: If the sub-array is sorted then skip merge if (src[nMid - 1] &amp;lt;= src[nMid]){ std::copy(src.</description>
    </item>
    
  </channel>
</rss>