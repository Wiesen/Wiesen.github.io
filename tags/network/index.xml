<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Network on Wiesen&#39;s Blog</title>
    <link>https://wiesen.github.io/tags/network/</link>
    <description>Recent content in Network on Wiesen&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 18 Feb 2018 21:31:20 +0800</lastBuildDate>
    
	<atom:link href="https://wiesen.github.io/tags/network/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>状态机&amp;事件驱动&amp;eventloop</title>
      <link>https://wiesen.github.io/post/%E7%8A%B6%E6%80%81%E6%9C%BA%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8eventloop/</link>
      <pubDate>Sun, 18 Feb 2018 21:31:20 +0800</pubDate>
      
      <guid>https://wiesen.github.io/post/%E7%8A%B6%E6%80%81%E6%9C%BA%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8eventloop/</guid>
      <description>状态机编程思想：“致人 而不致于人” 1. 有限状态机 Difination: 有限状态机（finite-state machine）又称有限状态自动机，简称状态机，是表示有限个状态以及在这些状态之间的转移和动作等行为的数学模型。
Application:
 自然语言处理：okenizer、parser、regexp 网络协议 游戏设计 自动客服  2. 事件驱动与状态模式 状态模式：
 motivation： 一个业务如果包含多个阶段，而各个阶段之间又并非顺序执行，可能存在复杂的条件跳转。此时，运用状态模式可以帮助我们理清业务逻辑，并发现一些逻辑缺陷。 定义：状态模式（State Pattern）中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。 意图：允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。 主要解决：对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。 何时使用：代码中包含大量与对象状态有关的条件语句。 如何解决：将各种具体的状态类抽象出来。  状态模式包含三个角色：
 Context：环境类又称为上下文类，它是拥有状态的对象，在环境类中维护一个抽象状态类State的实例，这个实例定义当前状态，在具体实现时，它是一个State子类的对象，可以定义初始状态； State：抽象状态类，用于定义一个接口以封装与环境类的一个特定状态相关的行为； ConcreteState：具体状态类是抽象状态类的子类，每一个子类实现一个与环境类的一个状态相关的行为，每一个具体状态类对应环境的一个具体状态，不同的具体状态类其行为有所不同。  事件驱动下的状态模式:
 基于事件驱动的模型，可以使得系统按照预先定义的方式，在状态机中扭转（进入某个状态时，触发什么事件）。 一个完整的业务处理过程包含多个状态迁移。这就需要一个驱动器来管理每一次的状态迁移。 由于状态的迁移是事件驱动的，于是很容易想到运用观察者模式来设计这样一个驱动器。于是，状态是Observable，由许多个Observer订阅，而每个Observer的任务是，当状态机因为某个事件而跳转到某个状态时，向状态机发送下一个事件的通知，直到状态机到达一个终止状态（在这一模型中，终止状态就是没有任何Observer订阅的状态）。  eventloop difination:
 the event loop, message dispatcher, message loop, message pump, or run loop is a programming construct that waits for and dispatches events or messages in a program. It works by making a request to some internal or external &amp;ldquo;event provider&amp;rdquo; (that generally blocks the request until an event has arrived), and then it calls the relevant event handler (&amp;ldquo;dispatches the event&amp;rdquo;).</description>
    </item>
    
    <item>
      <title>TCP粘包问题：分包</title>
      <link>https://wiesen.github.io/post/tcp%E6%96%AD%E5%8C%85%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 26 Oct 2016 10:32:46 +0800</pubDate>
      
      <guid>https://wiesen.github.io/post/tcp%E6%96%AD%E5%8C%85%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/</guid>
      <description>Update 2017-01-17 From Muduo：
TCP 是“字节流”协议，其本身没有“消息包”的概念，因此“粘包问题”是个伪命题。但对利用 TCP 进行通信的应用层程序来说，分包是其基本需求。
分包指的是在发送一个消息（message）或者一帧（frame）数据时，通过一定的处理，令接收方能从字节流中识别并截取（还原）出一个个消息包。
对于短连接的 TCP 服务，分包不是问题。只要发送方主动关闭连接，就表示一条消息发送完毕，接收方 read() 返回0，从而得知消息结尾。
对于长连接的 TCP 服务，分包有4种方法：
 消息长度固定（亦即是提前确定包长度，适合定长消息包）； 使用特殊的字符或字符串作为消息的边界，例如 HTTP 协议的 headers 以“\r\n”为字段的分隔符； 在每条消息的头部加一个长度字段，最常见的做法； 利用消息本身的格式来分包，例如 XML 格式的消息中&amp;hellip;的配对，或者json格式中的{&amp;hellip;}的配对。解析这种消息格式通常会用到状态机。  粘包问题 一个完整的消息可能会被TCP拆分成多个包进行发送，也有可能把多个小的包封装成一个大的数据包发送。粘包是指发送方发送的若干包数据到接收方接收时粘成一包，从接收缓冲区看，后一包数据的头紧接着前一包数据的尾。
粘包问题是由 TCP 是面向字节流协议因此没有消息边界所引起的。而 UDP 是面向数据报的协议，所以不存在拆包粘包问题。
存在以下特殊情况：
 如果发送数据无结构，如文件传输，这样发送方只管发送，接收方只管接收存储就 ok，不用考虑粘包； 如果利用 TCP 短连接时，不会出现粘包问题； 当发送数据存在一定结构，并且需要维护长连接时，则需要考虑粘包问题；  问题原因 出现拆包粘包现象的原因既可能由发送方造成，也可能由接收方造成:
 要发送的数据大于TCP发送缓冲区剩余空间大小，发生拆包； 待发送数据大于MSS（最大报文长度），TCP在传输前进行拆包； 要发送的数据小于TCP发送缓冲区的大小，TCP将多次写入缓冲区的数据一次发送出去，造成粘包; 接收方没能及时地接收缓冲区的数据，造成粘包;  解决方法 解决粘包的方法，是由应用层进行分包处理，本质上就是由应用层来维护消息和消息的边界（即定义自己的会话层和表示层协议）。
本文处理办法：
 发送方在每次发送消息时将数据报长度写入一个int32作为包头一并发送出去, 称之为Encode； 接受方则先读取一个int32的长度的消息长度信息, 再根据长度读取相应长的byte数据, 称之为Decode；
//codec.go package codec import ( &amp;quot;bufio&amp;quot; &amp;quot;bytes&amp;quot; &amp;quot;encoding/binary&amp;quot; ) func Encode(message string) ([]byte, error) { // 读取消息的长度 var length int32 = int32(len(message)) var pkg *bytes.</description>
    </item>
    
  </channel>
</rss>