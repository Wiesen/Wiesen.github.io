<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>High Performance Server on Wiesen&#39;s Blog</title>
    <link>https://wiesen.github.io/tags/high-performance-server/</link>
    <description>Recent content in High Performance Server on Wiesen&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 24 Nov 2016 21:31:20 +0800</lastBuildDate>
    
	<atom:link href="https://wiesen.github.io/tags/high-performance-server/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RR Mode multi-thread TCP Server</title>
      <link>https://wiesen.github.io/project/rr-mode-multi-thread-tcp-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wiesen.github.io/project/rr-mode-multi-thread-tcp-server/</guid>
      <description></description>
    </item>
    
    <item>
      <title>I/O Event Handling Design Patterns</title>
      <link>https://wiesen.github.io/post/io-event-handling-design-patterns/</link>
      <pubDate>Thu, 24 Nov 2016 21:31:20 +0800</pubDate>
      
      <guid>https://wiesen.github.io/post/io-event-handling-design-patterns/</guid>
      <description>Introduction System I/O can be blocking, or non-blocking synchronous, or non-blocking asynchronous:
 Blocking I/O means that the calling system does not return control to the caller until the operation is finished a non-blocking synchronous call returns control to the caller immediately  I/O multiplexing mechanisms rely on an event demultiplexor: dispatches I/O events from a limited number of sources to the appropriate read/write event handlers.
There are two non-blocking I/O multiplexing mechanisms: reactor &amp;amp;&amp;amp; proactor.</description>
    </item>
    
  </channel>
</rss>